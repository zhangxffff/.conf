set backspace=indent,eol,start
set encoding=utf-8
set splitbelow
set nu cindent ts=4 sw=4 et smarttab
set cinoptions=g-1
syntax on
if has("autocmd")
      au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif
endif
set undofile
set undodir=$HOME/.vimundo

set nocompatible              " be iMproved, required
filetype off                  " required

" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()
" alternatively, pass a path where Vundle should install plugins
"call vundle#begin('~/some/path/here')

" let Vundle manage Vundle, required
Plugin 'VundleVim/Vundle.vim'
Plugin 'fatih/vim-go'
Plugin 'jiangmiao/auto-pairs'
Plugin 'Valloric/YouCompleteMe'
Plugin 'Shougo/vimshell.vim'
Plugin 'Shougo/vimproc.vim'
Plugin 'lervag/vimtex'
Plugin 'rdnetto/YCM-Generator'
Plugin 'airblade/vim-gitgutter'
Plugin 'majutsushi/tagbar'
Plugin 'tpope/vim-vinegar'

" All of your Plugins must be added before the following line
call vundle#end()            " required
filetype plugin indent on    " required
" To ignore plugin indent changes, instead use:
"filetype plugin on

let g:tagbar_width = 24

let g:netrw_banner = 0
let g:netrw_browse_split = 4
let g:netrw_altv = 1
let g:netrw_winsize = 15

function! SideBarOpen()
    if winwidth('%') < 100
        return
    endif
    Vexplore
    wincmd p
    TagbarToggle
endfunction

function! SideBarToggle()
    side_exist = 0
    call SideBarClose()
    Vexplore
    wincmd p
    TagbarToggle
endfunction

function! SideBarClose()
    for i in range(1, bufnr('$'))
        let buf_name = getbufvar(i, '&filetype')
        if buf_name == 'netrw' || buf_name == 'tagbar'
            exec 'bdelete' . i
        endif
    endfor
endfunction

function! NoValidBuffer()
    if winnr("$") == 2
        let wd1 = getbufvar(winbufnr(1), '&filetype')
        let wd2 = getbufvar(winbufnr(2), '&filetype')
        if wd1 == 'tagbar' && wd2 == 'netrw'
            exec 'qa'
            return
        endif
        if wd1 == 'netrw' && wd2 == 'tagbar'
            exec 'qa'
            return
        endif
    elseif winnr("$") == 1
        let wd1 = getbufvar(winbufnr(1), '&filetype')
        if wd1 == 'tagbar' || wd1 == 'netrw'
            exec 'qa'
            return
        endif
    endif
endfunction

function! ResizeWhileChange()
    if winwidth('%') < 100
        call SideBarClose()
    endif
    if winwidth('%') >= 100
        call SideBarToggle()
    endif
endfunction

autocmd bufenter * call NoValidBuffer()
autocmd VimResized * call ResizeWhileChange()
autocmd VimEnter * call SideBarOpen()


nnoremap <leader>gl :YcmCompleter GoToDeclaration<CR>
nnoremap <leader>gf :YcmCompleter GoToDefinition<CR>
nnoremap <leader>g :YcmCompleter GoToDefinitionElseDeclaration<CR>
nnoremap <leader>b <C-o>
nnoremap <leader>p <C-i>

let g:ycm_confirm_extra_conf=0

autocmd FileType c let g:ycm_global_ycm_extra_conf='~/.conf/ycm/c/.ycm_extra_conf.py'
autocmd FileType h let g:ycm_global_ycm_extra_conf='~/.conf/ycm/c/.ycm_extra_conf.py'
autocmd FileType cpp let g:ycm_global_ycm_extra_conf='~/.conf/ycm/cpp/.ycm_extra_conf.py'
let g:ycm_key_invoke_completion='<C-v>'
let g:ycm_cache_omnifunc=0
let g:ycm_collect_identifiers_from_tags_files=1
let g:ycm_semantic_triggers =  {
  \   'objc' : ['->', '.', 're!\[[_a-zA-Z]+\w*\s', 're!^\s*[^\W\d]\w*\s',
  \             're!\[.*\]\s'],
  \   'ocaml' : ['.', '#'],
  \   'cpp,objcpp' : ['->', '.', '::', 're![_a-zA-Z][_a-zA-Z][_a-zA-Z]'],
  \   'c' : ['->', '.', 're![a-zA-Z][a-zA-Z]'],
  \   'perl' : ['->'],
  \   'php' : ['->', '::'],
  \   'cs,java,javascript,typescript,d,python,perl6,scala,vb,elixir' : ['.'],
  \   'ruby' : ['.', '::'],
  \   'lua' : ['.', ':'],
  \   'erlang' : [':'],
  \}

set completeopt-=preview
let g:ycm_add_preview_to_completeopt = 0
"let g:ycm_autoclose_preview_window_after_insertion = 1
let g:ycm_seed_identifiers_with_syntax=1



if !exists('g:ycm_semantic_triggers')
  let g:ycm_semantic_triggers = {}
endif
let g:ycm_semantic_triggers.tex = [
      \ 're!\\[A-Za-z]*cite[A-Za-z]*(\[[^]]*\]){0,2}{[^}]*',
      \ 're!\\[A-Za-z]*ref({[^}]*|range{([^,{}]*(}{)?))',
      \ 're!\\hyperref\[[^]]*',
      \ 're!\\includegraphics\*?(\[[^]]*\]){0,2}{[^}]*',
      \ 're!\\(include(only)?|input){[^}]*',
      \ 're!\\\a*(gls|Gls|GLS)(pl)?\a*(\s*\[[^]]*\]){0,2}\s*\{[^}]*',
      \ 're!\\includepdf(\s*\[[^]]*\])?\s*\{[^}]*',
      \ 're!\\includestandalone(\s*\[[^]]*\])?\s*\{[^}]*',
      \ 're!\\usepackage(\s*\[[^]]*\])?\s*\{[^}]*',
      \ 're!\\documentclass(\s*\[[^]]*\])?\s*\{[^}]*',
      \ ]

autocmd InsertLeave * if pumvisible() == 0|pclose|endif     "离开插入模式后自动关闭预览窗口

let g:ycm_min_num_of_chars_for_completion = 3
let g:ycm_max_num_identifier_candidates = 5
set pumheight=10

" vimshell
function! OpenShell()
    if bufname('') =~ "[VimShell]\."
    endif
    split
    resize 10
    VimShell
endfunction
map <C-y> :call OpenShell()<CR> 

"let g:Tex_FormatDependency_pdf = 'dvi,ps,pdf'
"let g:Tex_CompileRule_dvi = 'xelatex --interaction=nonstopmode $*'
"let g:Tex_CompileRule_ps = 'dvips -Ppdf -o $*.ps $*.dvi'
"let g:Tex_CompileRule_pdf = 'ps2pdf $*.ps'
"
let g:ycm_autoclose_preview_window_after_completion = 1
let g:ycm_key_list_stop_completion = ['<leader>']

let g:go_fmt_command = "goimports"
let g:go_highlight_types = 1
let g:go_highlight_fields = 1
let g:go_highlight_functions = 1
let g:go_highlight_methods = 1
