set nu cindent ts=5 sw=4 et smarttab
syntax on
if has("autocmd")
      au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif
endif
set undofile
set undodir=$HOME/.vimundo

set nocompatible              " be iMproved, required
filetype off                  " required

" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()
" alternatively, pass a path where Vundle should install plugins
"call vundle#begin('~/some/path/here')

" let Vundle manage Vundle, required
Plugin 'VundleVim/Vundle.vim'

Plugin 'jiangmiao/auto-pairs'
Plugin 'Valloric/YouCompleteMe'
Plugin 'scrooloose/nerdtree'
Plugin 'taglist.vim'
Plugin 'winmanager'


" All of your Plugins must be added before the following line
call vundle#end()            " required
filetype plugin indent on    " required
" To ignore plugin indent changes, instead use:
"filetype plugin on

let g:NERDTreeWinSize=20
let Tlist_WinWidth = 20

function! NERDTlistToggle()
    if winwidth('%') < 100
        return
    endif
    Tlist
    NERDTree
    wincmd p
endfunction

function! NERDTlistClose()
    TlistClose
    NERDTreeClose
endfunction

function! NoValidBuffer()
    if winnr("$") == 2
        let wd1 = bufname(winbufnr(1))
        let wd2 = bufname(winbufnr(2))
        if wd1 == t:NERDTreeBufName && wd2 == "__Tag_List__"
            exec 'qa'
        endif
        if wd1 == "__Tag_List__" && wd2 == t:NERDTreeBufName
            exec 'qa'
        endif
    endif
endfunction

function! ResizeWhileChange()
    if winwidth('%') < 100
        call NERDTlistClose()
    endif
    if winwidth('%') >= 100
        call NERDTlistToggle()
    endif
endfunction

"autocmd vimenter * NERDTree
autocmd VimEnter * wincmd p
"autocmd StdinReadPre * let s:std_in=1
"autocmd VimEnter * if argc() == 0 && !exists("s:std_in") | NERDTree | endif
map <C-n> :call NERDTlistToggle()<CR> 
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTreeType") && b:NERDTreeType == "primary") | q | endif
autocmd bufenter * call NoValidBuffer()
autocmd VimEnter * call NERDTlistToggle()
autocmd VimResized * call ResizeWhileChange()



let Tlist_Use_Right_Window = 1
let Tlist_Enable_Fold_Column = 0

let Tlist_Exit_OnlyWindow=1


let g:ycm_confirm_extra_conf=0

autocmd FileType c let g:ycm_global_ycm_extra_conf='~/.conf/ycm/c/.ycm_extra_conf.py'
autocmd FileType cpp let g:ycm_global_ycm_extra_conf='~/.conf/ycm/cpp/.ycm_extra_conf.py'
let g:ycm_key_invoke_completion='<C-v>'
let g:ycm_cache_omnifunc=0
let g:ycm_collect_identifiers_from_tags_files=1

let g:ycm_semantic_triggers =  {
  \   'c' : ['->', '.', 're![a-zA-Z][a-zA-Z]'],
  \   'objc' : ['->', '.', 're!\[[_a-zA-Z]+\w*\s', 're!^\s*[^\W\d]\w*\s',
  \             're!\[.*\]\s'],
  \   'ocaml' : ['.', '#'],
  \   'cpp,objcpp' : ['->', '.', '::'],
  \   'perl' : ['->'],
  \   'php' : ['->', '::'],
  \   'cs,java,javascript,typescript,d,python,perl6,scala,vb,elixir,go' : ['.'],
  \   'ruby' : ['.', '::'],
  \   'lua' : ['.', ':'],
  \   'erlang' : [':'],
  \ 
  \}
let g:ycm_autoclose_preview_window_after_insertion = 1
let g:ycm_autoclose_preview_window_after_completion = 1
let g:ycm_seed_identifiers_with_syntax=1

autocmd InsertLeave * if pumvisible() == 0|pclose|endif     "离开插入模式后自动关闭预览窗口
